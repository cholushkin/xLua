v2.1.15 June 24, 2020
new features
1. Generate code filter
2. Optimize the performance of reflection search delegate matching bridge
3. The problem that the mobile phone version of unity 2019.2 and above cannot be injected

change

bugfix
1. Reflection search for delegate bridges with the same name behaves inconsistently when code is not generated
2. When the nested struct is marked as PackAsTable, the generated code reports an error
3. Add reflection wrap code to stack space check
4. If the enumeration defines a lot of values (thousands), it will trigger a bug of unity under android: the function body is very large and has many branches, and the execution of the function will crash
5. The chunkname and the script file name are inconsistent
6. Minimal generation mode enumeration generates code error
7. When using reflection to register enumeration values, if an enumeration has multiple identical values, such as A and B are both 1, then accessing B in lua will be empty
8. The problem that sbyte[] turns into a string from push to lua under .net 4
9. Generics lead to code generation failure
10. When non-Assembly-CSharp assembly is injected, the out parameter is handled incorrectly
11. The embedded class may fail to set private access through xlua.private_accessible
12. After the cecil inserts the command, the offset is not automatically updated, which will lead to an error in calculating the offset in some cases


v2.1.14 February 27, 2019
new features
1. Add support for nintento switch
2. Compatible with Unity 2018
3. Android arm64 support
4. Visual studio 2017 compilation support for native libraries
5. Add "XLua/Generate Minimize Code" menu
6. Prevent some projects from having illegal dlls that cause the generated code to be interrupted
7. More efficient lua_pushstring (need to be enabled by NATIVE_LUA_PUSHSTRING)

change
1. The default compiler of the window library is changed to visual studio 2017

bugfix
1. Correct the problem that the enumeration type will crash if only GCOptimize is added without LuaCallCSharp
2. The sample configuration adds filtering to the Edititor class
3. UWP compatibility repair
4. Implementation of methods with the same signature introduced by interface inheritance
5. The code is not generated, and the behavior of the extension method is inconsistent
6. Fix the Nullable type parameter. If the last parameter is nil, it will cause all other parameters to be nil.


v2.1.13 December 5, 2018
new features
1. Add AdaptByDelegate injection mode;
2. Added xlua.get_generic_method for calling generic functions;
3. Support generic writing like CS.System.Collections.Generic.List(CS.System.Int32);
4. Inject new options: ignore the compiler to automatically generate code, and not generate base proxy;
5. For lua programming and hot patches, add directly available automatic configuration samples;
6. Added gc64 support for luajit;
7. Add support for compatible bytecode (a bytecode supports 32-bit and 64-bit systems);
8. Built-in new lua memory leak detection tool;
9. Dynamic instantiation of delegate bridge: delegate is within 4 parameters, all parameters are reference types, no return value or return reference type, and lua functions can be called without configuring CSharpCallLua;
10. Provide the util.print_func_ref_by_csharp function to view the lua functions currently referenced by C#;
11. Support the working mode without CS global variables;


change
1. Virtual machine upgrade: lua5.3.4 -> lua5.3.5, luajit2.1b2 -> luajit2.1b3;
2. Optimized the code segment occupancy of the delegate bridge;
3. Change to PostProcessBuild event to check whether code is generated;
4. Adapt to xcode 10: osx platform no longer supports 32bit version build;
5. When the name space and class name are misspelled, an error will be reported for the setting of static members;
6. Prevent xlua from working abnormally due to the CS global table being deleted;
7. Build lib under Windows, if you fail to execute cmake with vs 2015 parameters, continue to try to use vs 2017;
8. When the code is not generated in the editor, the Blacklist is also checked to maintain consistency with the runtime;

bugfix
1. The generic array generates an error in the code;
2. After LuaCallCSharp is configured for TypeExtensions, the judgment of IsValueType in lua will never be true;
3. Generate code to filter out functions and fields containing pointers;
4. Adapt to the case where the indexer attribute name is not Item;
5. Solve the problem that abnormal attribute initialization will cause code generation and injection termination;
6. An empty Enum generates a code error in the streamlined mode;
7. By dividing the initialization function into small functions, avoid the bug that unity executes large function crash under android;
8. Assignable handles the case where obj is null;
9. The embedded class is not Obsolete, but the generated code of the outer class Obsolete reports an error
10. Under the inline injection method, if the lua logic runs abnormally, the abnormal information cannot be seen;
11. After xlua.private_accessible is accessed, the public method with the same name cannot be accessed;
12. The parameters modified by [Out] should not generate the out keyword;
13. When looking for a suitable adapter through reflection, it is possible to access non-adapter functions;
14. There is no get_Item and set_Item in the simplified mode export code;
15. The problem of not automatically making xlua.private_accessible in IntKey mode;


v2.1.12 July 9, 2018
new features
1. Nullable support
2. Support dll injection other than Assembly-CSharp (beta)
3. Executing xlua.hotfix will automatically make this type of private accessible
4. xlua.private_accessible optimization: 1. The base class will also be set to be privately accessible; 2. The privatization will be delayed until the first access class
5. Add xlua.util.state, which can add state to a c# object
6. This[string field] or this[object field] operator overload adds get_Item and set_Item calls
7. Inject and print error information when compiling
8. Automatic implementation of event and index mapping when interface is configured to CSharpCallLua
9. Remove the WARNING: The runtime version supported by this application is unavailable print for unity5.5 and above

change
1. Remove the Stateful method (because xlua.util.state can already achieve similar effects)
2. Abandon the embedded mode mode

bugfix
1. Underline the local variables of the generated code to prevent symbol conflicts
2. If the class is not placed in the Hotfix list, no base call proxy will be generated
3. Code refactoring, readability optimization
4. Solve the problem that with params byte[] may cause compilation errors in the generated code
5. Solve the problem that xlua.private_accessible cannot be used when the class contains private event
6. Constructor injection, if the Ret instruction follows the branch, the injection logic should be between the branch and Ret
7. Constructor injection, if the jump range is greater than one byte after the injection of the instruction, it should be changed to a long jump
8. Solve the problem that if a delegate is not an embedded type of a certain class, CS.namespace.classname is empty
9. Prevent name conflicts of Util classes under Editor
10. If there is an exception in the generic override, filter it out first
11. Solve the problem of generating code compilation errors caused by empty enum
12. Solve the problem that il2cpp packaging under the uwp platform cannot access any classes
13. Hotfix a function with a private type of params parameter, resulting in the generation of code compilation errors and injection failures
14. If two LuaBases point to the same Lua object, GetHashCode should return the same value
15. [Out] tag parameter generated code failed to compile
16. Combination of interleaved array + multi-dimensional array, the problem of generating code error

v2.1.11 March 20, 2018
new features
1. xlua.private_accessible supports private embedded types
2. Add xlua.release, which is used to actively release lua's reference to a c# object
3. Support the display structure of embedded delegates
4. Where class needs to be passed (such as xlua.private_accessible), the Type object of C# is supported
5. Support traversing IEnumerable objects with pairs
6. In the hot patch scenario, the override function is supported to call the override function (corresponding to the c# base keyword)

change
1. Simplify the reflection access of property, which has better compatibility after simplification;

bugfix
1. Compatible with ios 11 (remove system call)
2. The struct that implements the interface does not use gc to optimize the code
3. The .net compatibility of the emit feature
4. emit improperly handles the const value of ulong
5. Interface bridging code, when the interface is inherited, the generated code reports an error when the parent interface and the child interface have the same name and different types of attributes
6. Under multiple virtual machines, when creating and destroying coroutines continuously, there may be duplication of coroutine pointers
7. When the parameter is a generic type, such as ICollectio, the code should not be generated

v2.1.10 September 18, 2017
new features
1. Added DoNotGen configuration, which supports reflection for some functions of a type and generation for some;
2. Add the emit of wrapper;
3. webgl support;
4. Lua implements interface to support interface inheritance;
5. Support android compilation under windows (provided by xdestiny110);
6. When packaging, if "Generate Code" has not been executed, an error will be reported;

change
1. Change async_to_sync to resume and report an error;
2. Under il2cpp, temporarily remove the generic reflection call;
3. Upgrade to lua5.3.4 and merge into all official patches until 2017-9-1;

bugfix
1. C# only declares delegate and MulticastDelegate, and crashes when creating lua function mapping through reflection;
2. Solve the dll compatibility problem of some old versions of windows (such as xp);

v2.1.9 August 10, 2017
new features
1. Added the minimum generation mode (switched by GEN_CODE_MINIMIZE), which can save 50% of the text segment space;
2. Added xlua.util.createdelegate, which supports creating delegates directly in lua with C# functions without lua adaptation;
3. xlua.private_accessible supports public int Prop { get; private set; }
4. Added xlua.getmetatable, xlua.setmetatable, xlua.setclass, xlua.genaccessor to support lua to use C# type directly on the lua side;
5. Support for extension methods under reflection;
6. The lua53 version supports bit operator overloading: the bit operator overloading on the C# side corresponds to the bit operator overloading of lua; all enums are added with & and | bit operators;

Engineering optimization
1. Join travis continuous integration;

change
1. LuaCallCSharp automatically removes anonymous types;
2. Change THREAD_SAFT to THREAD_SAFE;
3. GenFlag.GCOptimize is marked as obsolete;
4. Delete the outdated GenConfig configuration method;

bugfix
1. Some system apis under the window phone are disabled and removed from the source code;
2. When the generic constraint is a struct, the generated code fails;
3. Unity2017.net 4.6, enumeration generated code error;

v2.1.8 June 27, 2017
new features
1. Add several custom parameters to the Hotfix tag: ValueTypeBoxing, IgnoreProperty, IgnoreNotPublic, Inline, IntKey
2. Hotfix code injection optimization, reducing the text segment occupation;
3. The Hotfix configuration supports placing the Editor directory, which can reduce the occupation of the text segment;
4. Support passing object parameters with specified types;
5. Call Obsolete method by reflection to print warning under Editor;

change

bugfix
1. The In and Out attributes independently set by pinvoke may cause code generation failure;
2. If the business is in